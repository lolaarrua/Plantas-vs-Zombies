import wollok.game.*

object juego{
	var property zombies = []
	var property girasoles = []
	var property lanzaguisantes = []
	var property plantas = []
	var property invisibles = []
	var property guisantes = []
	var property soles = 25

  	method iniciar(){
		game.title("Plantas vs Zombies")
		game.cellSize(140)
		game.width(11)
		game.height(7)
		game.boardGround("fondo.png")
    	game.start()
    	self.mostrar_soles()
    	self.crear_invisibles()
    	//el collide no estÃ¡ completo xq le falta la consecuencia bien hecha
    	invisibles.forEach{invisible =>game.whenCollideDo(invisible, {algo => game.stop()})}
    	game.onTick(10000, "zombie aparece", { self.agregar_zombiecomun() })
    	game.onTick(30000, "zombie con casco aparece", { self.agregar_zombieconCasco() })
    	game.onTick(8000, "se genera sol", { girasoles.forEach{girasol=> self.generar_soles()} })
    	game.onTick(2000, "zombie se mueve", { zombies.forEach{zombie=> zombie.avanzar()} })
    	game.onTick(2000, "lanzaguisantes lanza guisante", { lanzaguisantes.forEach{lanzaguisante=> lanzaguisante.lanzar_guisante()} })
    	game.schedule(120000,{game.removeTickEvent("zombie aparece")})
    	game.schedule(120000,{game.removeTickEvent("zombie con casco aparece")})
    	
    	keyboard.enter().onPressDo { self.agregar_girasol() }
    	keyboard.space().onPressDo { self.agregar_nuez() }
    	keyboard.control().onPressDo { self.agregar_lanzaguisantes() }
    	
  	}

	method lanzar_guisante(){
		const guisante = new Guisante(position = (lanzaguisantes.forEach{lanzaguisantes => lanzaguisantes.position().right(1)}))
		game.addVisual(guisante)
		guisantes.add(guisante)
		guisante.moverse()
		game.onCollideDo(self,{zombie=>
			if(zombie.nombre() == 'zombie'){
				zombie.vida(zombie.vida() - 5)
				if(zombie.vida() <= 0){
					self.desaparecer_zombie()
				}
			}
		})
		
	}

	method desaparecer_zombie(){
		if(zombies.forEach{zombie=> zombie.vida()} <= 0){
		game.removeVisual(zombies)
	}
}
	method crear_invisibles(){
		(0..7).forEach{ y => invisibles.add(new Invisible(position = game.at(0 , y)))}
		invisibles.forEach{invisible => game.addVisual(invisible)}
	}


	method agregar_zombiecomun(){
  		const zombie = new Zombiecomun()
  		game.addVisual(zombie)
  		zombies.add(zombie)
  	} 
  
	method agregar_zombieconCasco(){
  		const zombieconcasco = new ZombieconCasco()
  		game.addVisual(zombieconcasco)
  		zombies.add(zombieconcasco)
  	} 
  
	method agregar_nuez(){
  		if(soles>=50){	
  			var nuez = new Nuez()
  			game.addVisual(nuez)
  			plantas.add(nuez)
  			soles = soles - 50
  		return true
  		}
  	return false
  	}  
  
	method agregar_girasol(){	
  		if(soles>=25){	
  			var girasol = new Girasol()
  			game.addVisual(girasol)
 			girasoles.add(girasol)
  			plantas.add(girasol)
  			soles = soles - 25
  		return true
  		}
  	return false
  	}
  	
  	method agregar_lanzaguisantes(){
		if(soles>=100){
			var lanzaguisante = new Lanzaguisantes()
			game.addVisual(lanzaguisante)
			plantas.add(lanzaguisante)
			lanzaguisantes.add(lanzaguisante)
			soles = soles - 100
		return true
		}
	return false
	}
  	
  
	method generar_soles(){
  		soles = soles + 25 
  	}
 
	method mostrar_soles(){
  		game.addVisual(cantidadSoles)
  		}
	}




class Plantas{
	var property durabilidad = 0
	var property position = game.at(1, 1.randomUpTo(5).truncate(0))
	var property nombre = 'planta'
	
		
	}
	
	method perder_durabilidad(){ 
	durabilidad-=1 
	if(durabilidad<=0){ 
		self.desaparecer()
	}
	 }

method desaparecer(){
	game.removeVisual(self)
}
}
class Nuez inherits Plantas(durabilidad = 30, position = game.at(3, 1.randomUpTo(5).truncate(0))){
	method image() = "nuez.png"	

}
class Girasol inherits Plantas(durabilidad = 15){
	var property soles = juego.soles()
	method image() = "girasol.png"
 
}

class Lanzaguisantes inherits Plantas(durabilidad = 15, position = game.at(2,1.randomUpTo(5).truncate(0))){
	method image() = "lanzaguisantes.png"
	
	
}

class Guisante{
	var position
	method image() = "guisante.png"
	method position() = position
	
	method moverse(){
		game.onTick(200,"guisante",{position = position.right(1)})
		if(position.x() > game.width()){
			game.removeTickEvent("guisante")
				game.removeVisual(self)
		}
	}
}




class Zombie { 
var property nombre = 'zombie' 
var property position = game.at(11, 1.randomUpTo(5).truncate(0)) 
var property vida = 0 

method avanzar(){
	if (not(self.parar())){
		position = position.left(1)		
	}
}

method parar(){
	var valor = 0
	game.allVisuals().forEach{visual =>
		if (visual.position() == position.left(1) and visual.nombre() == 'planta'){
			valor +=1
		visual.perder_durabilidad()
		} 
	}
	return valor > 0
	}

}
class Zombiecomun inherits Zombie(vida = 10){
	method image() = "zombiecomun.png"

}
  
class ZombieconCasco inherits Zombie(vida = 15){	
	method image() = "zombieconCasco.png"

}


object paleta {
	const property blanco = "FFFFFFFF"
	var property nombre = 'paleta'
}

object cantidadSoles {

	var property nombre = 'soles'
	method position() = game.at(1,6)
	
	method image() = "sol.png"
	
	method text() = ("Tus soles: " + juego.soles())
	
method textColor() = paleta.blanco()
}

class Invisible{
	var property nombre = 'invisible'
	var property position
	method image() = "transparente.png"

}
